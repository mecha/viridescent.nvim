local p = require("viridescent.palette")

return {
    ColorColumn = { bg = p.dark },
    Conceal = { fg = p.gray },
    CurSearch = { fg = p.black, bg = p.bright_mint },
    Cursor = { reverse = true },
    CursorColumn = { link = "CursorLine" },
    CursorIM = { link = "Cursor" },
    CursorLine = { bg = p.dark },
    CursorLineNr = { fg = p.fg },
    Debug = { fg = p.orange },
    DiffAdd = { fg = p.black, bg = p.green },
    DiffAdded = { fg = p.green },
    DiffChange = { fg = p.black, bg = p.yellow },
    DiffDelete = { fg = p.black, bg = p.red },
    DiffFile = { fg = p.ice },
    DiffIndexLine = { fg = p.dark_gray },
    DiffRemoved = { fg = p.red },
    DiffText = { fg = p.white, bg = p.dark_ice },
    Directory = { fg = p.mint },
    EndOfBuffer = { fg = p.dark },
    ErrorMsg = { fg = p.red, bold = true },
    FloatBorder = { fg = p.mint, bg = p.dark },
    FloatFooter = { link = "FloatBorder" },
    FloatShadow = { bg = p.dim },
    FloatShadowThrough = { link = "FloatShadow" },
    FloatTitle = { link = "FloatBorder" },
    FoldColumn = { fg = p.fg },
    Folded = { fg = p.fg, bg = p.dark },
    IncSearch = { link = "CurSearch" },
    LineNr = { fg = p.dim },
    MatchParen = { fg = p.orange, bg = p.dark_gray, bold = true },
    ModeMsg = { fg = p.mint, bold = true },
    MoreMsg = { fg = p.blue, bold = true },
    MsgArea = { bg = p.dark },
    NonText = { fg = p.dark_gray },
    Normal = { fg = p.fg, bg = p.bg },
    NormalFloat = { fg = p.fg, bg = p.dark },
    NormalNC = { link = "Normal" },
    Pmenu = { fg = p.fg, bg = p.dark },
    PmenuSbar = { fg = nil, bg = p.dark },
    PmenuSel = { bg = p.dim },
    PmenuThumb = { fg = nil, bg = p.dark_gray },
    Question = { fg = p.yellow },
    QuickFixLine = { fg = p.blue, underline = true },
    Search = { fg = p.black, bg = p.mint },
    SignColumn = { fg = p.fg },
    SpecialKey = { link = "NonText" },
    SpellBad = { fg = nil, undercurl = true, sp = p.red },
    SpellCap = { fg = nil, undercurl = true, sp = p.yellow },
    SpellLocal = { fg = nil, undercurl = true, sp = p.blue },
    SpellRare = { fg = nil, undercurl = true, sp = p.purple },
    StatusLine = { fg = p.fg, bg = p.dark },
    StatusLineNC = { fg = p.dark_gray, bg = p.dark },
    Substitute = { fg = p.dark, bg = p.green },
    TabLine = { fg = p.fg, bg = p.dark },
    TabLineFill = { fg = p.dark_gray, bg = p.dark },
    TabLineSel = { fg = p.dark, bg = p.fg },
    Terminal = { fg = p.fg, bg = p.bg },
    Title = { fg = p.mint, bold = true },
    ToolbarButton = { fg = p.dark, bg = p.blue },
    ToolbarLine = { fg = p.fg },
    VertSplit = { fg = p.dark },
    Visual = { bg = p.dark_mint },
    VisualNOS = { bg = p.dark_mint, underline = true },
    WarningMsg = { fg = p.yellow, bold = true },
    Whitespace = { link = "NonText" },
    WildMenu = { fg = p.dark, bg = p.blue },
    WinBar = { fg = p.gray },
    WinBarNC = { link = "WinBar" },
    WinSeparator = { fg = p.dark },
    debugBreakpoint = { fg = p.dark, bg = p.red },
    debugPC = { bg = p.red },
    lCursor = { link = "Cursor" },

    -- RTF
    Underlined = { underline = true },
    Bold = { bold = true },
    Italic = { italic = true },
    Strike = { strikethrough = true },

    -- Syntax
    Boolean = { link = "Constant" },
    Character = { link = "Constant" },
    Comment = { fg = p.mint, bg = "none" },
    Conditional = { fg = p.purple },
    Constant = { fg = p.orange },
    Define = { link = "PreProc" },
    Delimiter = { fg = p.gray },
    Error = { fg = p.red },
    Exception = { link = "Keyword" },
    Float = { link = "Constant" },
    Function = { fg = p.blue },
    Identifier = { fg = p.bright_red },
    Include = { link = "PreProc" },
    Keyword = { fg = p.purple },
    Label = { fg = p.bright_red, bold = true },
    Macro = { fg = p.pink },
    Number = { link = "Constant" },
    Operator = { fg = p.purple },
    PreCondit = { link = "PreProc" },
    PreProc = { fg = p.purple },
    Repeat = { link = "Keyword" },
    Special = { fg = p.red },
    SpecialChar = { link = "Special" },
    SpecialComment = { link = "Comment" },
    Statement = { fg = p.purple },
    StorageClass = { fg = p.yellow },
    String = { fg = p.green },
    Structure = { link = "Type" },
    Tag = { fg = p.blue },
    Todo = { fg = p.black, bg = p.purple, bold = true },
    Type = { fg = p.yellow },
    Typedef = { link = "Type" },

    -- Treesitter
    ["@attribute"] = { fg = p.bright_mint },
    ["@boolean"] = { link = "Boolean" },
    ["@comment"] = { link = "Comment" },
    ["@constant"] = { link = "Constant" },
    ["@constructor"] = { fg = p.yellow },
    ["@field"] = { fg = p.ice },
    ["@function"] = { fg = p.blue },
    ["@keyword"] = { link = "Keyword" },
    ["@keyword.conditional"] = { link = "Conditional" },
    ["@keyword.conditional.ternary"] = { link = "Operator" },
    ["@keyword.coroutine"] = { link = "Keyword" },
    ["@keyword.debug"] = { link = "Keyword" },
    ["@keyword.directive"] = { link = "PreProc" },
    ["@keyword.directive.define"] = { fg = p.purple, bold = true },
    ["@keyword.exception"] = { link = "Exception" },
    ["@keyword.import"] = { link = "Include" },
    ["@keyword.modifier"] = { fg = p.purple },
    ["@keyword.operator"] = { link = "Keyword" },
    ["@keyword.repeat"] = { link = "Repeat" },
    ["@keyword.return"] = { link = "Keyword" },
    ["@keyword.type"] = { link = "Keyword" },
    ["@label"] = { link = "Label" },
    ["@label.diff"] = { fg = p.yellow },
    ["@markup.heading"] = { link = "htmlTitle" },
    ["@markup.heading.1"] = { link = "markdownH1" },
    ["@markup.heading.2"] = { link = "markdownH2" },
    ["@markup.heading.3"] = { link = "markdownH3" },
    ["@markup.heading.4"] = { link = "markdownH4" },
    ["@markup.heading.5"] = { link = "markdownH5" },
    ["@markup.heading.6"] = { link = "markdownH6" },
    ["@markup.italic"] = { link = "markdownItalic" },
    ["@markup.link"] = { link = "Tag" },
    ["@markup.link.label"] = { link = "markdownLinkText" },
    ["@markup.link.url"] = { link = "markdownUrl" },
    ["@markup.list"] = { link = "markdownListMarker" },
    ["@markup.list.checked"] = { fg = p.yellow, bold = true },
    ["@markup.list.unchecked"] = { fg = p.gray, bold = true },
    ["@markup.math"] = { fg = p.ice },
    ["@markup.quote"] = { fg = p.gray },
    ["@markup.raw"] = { link = "markdownCode" },
    ["@markup.raw.block"] = { link = "markdownCodeBlock" },
    ["@markup.strikethrough"] = { link = "markdownStrike" },
    ["@markup.strong"] = { link = "markdownBold" },
    ["@markup.underline"] = { link = "htmlUnderline" },
    ["@punctuation"] = { fg = p.gray },
    ["@attribute.typescript"] = { fg = p.blue },
    ["@character"] = { link = "Character" },
    ["@character.special"] = { link = "Special" },
    ["@comment.error"] = { fg = p.black, bg = p.red, bold = true },
    ["@comment.note"] = { fg = p.black, bg = p.blue, bold = true },
    ["@comment.todo"] = { link = "Todo" },
    ["@comment.warning"] = { fg = p.black, bg = p.orange, bold = true },
    ["@comment.warning.gitcommit"] = { bg = p.orange },
    ["@constant.builtin"] = { link = "Constant" },
    ["@constant.macro"] = { link = "Macro" },
    ["@constructor.lua"] = { fg = p.yellow },
    ["@diff.delta"] = { link = "DiffChange" },
    ["@diff.minus"] = { link = "DiffDelete" },
    ["@diff.plus"] = { link = "DiffAdd" },
    ["@error"] = { link = "Error" },
    ["@function.builtin"] = { fg = p.orange },
    ["@function.call"] = { link = "Function" },
    ["@function.macro"] = { fg = p.pink },
    ["@function.method"] = { link = "Function" },
    ["@function.method.call"] = { link = "Function" },
    ["@module"] = { fg = p.ice },
    ["@module.builtin"] = { link = "@variable.builtin" },
    ["@module.latex"] = { fg = p.mint },
    ["@number"] = { link = "Number" },
    ["@number.float"] = { link = "Float" },
    ["@operator"] = { link = "Operator" },
    ["@property"] = { link = "@variable.member" },
    ["@punctuation.bracket"] = { link = "Delimiter" },
    ["@punctuation.delimiter"] = { link = "Delimiter" },
    ["@punctuation.special"] = { link = "Special" },
    ["@punctuation.special.diff"] = { link = "Delimiter" },
    ["@string"] = { link = "String" },
    ["@string.documentation"] = { fg = p.green },
    ["@string.escape"] = { fg = p.tan },
    ["@string.regexp"] = { link = "Constant" },
    ["@string.special"] = { link = "Special" },
    ["@string.special.path"] = { fg = p.ice, underline = true },
    ["@string.special.path.diff"] = { fg = p.ice },
    ["@string.special.symbol"] = { link = "@variable.member" },
    ["@string.special.url"] = { fg = p.mint, underline = true, italic = true },
    ["@tag"] = { fg = p.purple },
    ["@tag.attribute"] = { link = "@variable.member" },
    ["@tag.builtin"] = { link = "@tag" },
    ["@tag.delimiter"] = { link = "Delimiter" },
    ["@type"] = { link = "Type" },
    ["@type.builtin"] = { link = "Type" },
    ["@type.definition"] = { link = "Type" },
    ["@variable"] = { fg = p.fg },
    ["@variable.builtin"] = { fg = p.red },
    ["@variable.member"] = { fg = p.bright_mint },
    ["@variable.parameter"] = { fg = p.coral },
    ["@variable.parameter.builtin"] = { fg = p.red },

    -- LSP
    ["@lsp.mod.readonly"] = { link = "@constant" },
    ["@lsp.mod.static.rust"] = { link = "@lsp.typemod.variable.static" },
    ["@lsp.mod.typeHint"] = { link = "@type" },
    ["@lsp.type.boolean"] = { link = "@boolean" },
    ["@lsp.type.builtinAttribute"] = { link = "@attribute" },
    ["@lsp.type.builtinConstant"] = { link = "@constant.builtin" },
    ["@lsp.type.builtinType"] = { link = "@type.builtin" },
    ["@lsp.type.class.markdown"] = {},
    ["@lsp.type.comment"] = {},
    ["@lsp.type.decorator"] = { link = "@attribute" },
    ["@lsp.type.derive"] = { link = "@constructor" },
    ["@lsp.type.deriveHelper"] = { link = "@attribute" },
    ["@lsp.type.enum"] = { link = "@type" },
    ["@lsp.type.enumMember"] = { link = "@constant" },
    ["@lsp.type.escapeSequence"] = { link = "@string.escape" },
    ["@lsp.type.event"] = { link = "Label" },
    ["@lsp.type.formatSpecifier"] = { link = "@punctuation.special" },
    ["@lsp.type.generic"] = {},
    ["@lsp.type.interface"] = { link = "@type" },
    ["@lsp.type.keyword"] = { link = "@keyword" },
    ["@lsp.type.lifetime"] = { link = "StorageClass" },
    ["@lsp.type.macro"] = { link = "Macro" },
    ["@lsp.type.magicFunction"] = { link = "@function.builtin" },
    ["@lsp.type.method"] = { link = "@function.method" },
    ["@lsp.type.namespace"] = { link = "@module" },
    ["@lsp.type.number"] = { link = "@number" },
    ["@lsp.type.operator"] = { link = "@operator" },
    ["@lsp.type.operator.cpp"] = {},
    ["@lsp.type.parameter"] = { link = "@variable.parameter" },
    ["@lsp.type.property"] = { link = "@property" },
    ["@lsp.type.selfKeyword"] = { link = "@variable.builtin" },
    ["@lsp.type.selfTypeKeyword"] = { link = "@type" },
    ["@lsp.type.string"] = { link = "" },
    ["@lsp.type.typeAlias"] = { link = "@type.definition" },
    ["@lsp.type.typeParameter"] = { link = "@type" },
    ["@lsp.type.unresolvedReference"] = { undercurl = true, sp = p.red },
    ["@lsp.type.variable"] = {},
    ["@lsp.type.variable.rust"] = { fg = p.fg },
    ["@lsp.typemod.class.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.enum.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.enumMember.defaultLibrary"] = { link = "@constant.builtin" },
    ["@lsp.typemod.function.builtin"] = { link = "@function.builtin" },
    ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.function.readonly"] = { link = "@function.method" },
    ["@lsp.typemod.generic.attribute"] = { link = "@keyword" },
    ["@lsp.typemod.keyword.async"] = { link = "@keyword.coroutine" },
    ["@lsp.typemod.keyword.injected"] = { link = "@keyword" },
    ["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.method.readonly"] = { link = "@function.method" },
    ["@lsp.typemod.method.static.rust"] = { link = "@function" },
    ["@lsp.typemod.operator.injected"] = { link = "@operator" },
    ["@lsp.typemod.parameter.mutable"] = { fg = p.coral },
    ["@lsp.typemod.parameter.readonly"] = { fg = p.coral },
    ["@lsp.typemod.property.readonly"] = { fg = p.mint },
    ["@lsp.typemod.string.injected"] = { link = "@string" },
    ["@lsp.typemod.struct.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.type.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.typeAlias.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.variable.callable"] = { link = "@function" },
    ["@lsp.typemod.variable.constant.rust"] = { link = "@constant" },
    ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
    ["@lsp.typemod.variable.global"] = { fg = p.red },
    ["@lsp.typemod.variable.injected"] = { link = "@variable" },
    ["@lsp.typemod.variable.mutable"] = { fg = p.green },
    ["@lsp.typemod.variable.static"] = { fg = p.ice },
    ["@lsp.typemod.variable.static.rust"] = {},

    -- Diagnostics
    DiagnosticDeprecated = { fg = p.purple, bg = p.dark_purple },
    DiagnosticError = { fg = p.red, bg = p.dark_red },
    DiagnosticHint = { fg = p.purple, bg = p.dark_purple },
    DiagnosticInfo = { fg = p.ice, bg = p.dark_ice },
    DiagnosticOk = { fg = p.green, bg = p.dark_green },
    DiagnosticUnnecessary = { link = "Comment" },
    DiagnosticWarn = { fg = p.yellow, bg = p.dark_yellow },

    -- Telescope
    TelescopeBorder = { fg = p.mint, bg = p.dark },
    TelescopeMatching = { fg = p.black, bg = p.mint, bold = true },
    TelescopeNormal = { fg = p.white, bg = p.dark },
    TelescopePreviewBorder = { link = "TelescopeBorder" },
    TelescopePreviewTitle = { link = "TelescopeBorder" },
    TelescopePromptBorder = { link = "TelescopeBorder" },
    TelescopePromptPrefix = { fg = p.mint },
    TelescopePromptTitle = { link = "TelescopeBorder" },
    TelescopeResultsBorder = { link = "TelescopeBorder" },
    TelescopeResultsComment = { fg = p.dark },
    TelescopeResultsTitle = { link = "TelescopeBorder" },
    TelescopeSelection = { fg = p.white, bg = p.dark_mint },
    TelescopeSelectionCaret = { fg = p.bright_mint, bg = p.dark },

    -- neotree
    NeoTreeDirectoryIcon = { link = "Directory" },
    NeoTreeDirectoryName = { link = "Directory" },
    NeoTreeExpander = { fg = p.mint },
    NeoTreeFileIcon = { fg = p.mint },
    NeoTreeFileName = { fg = p.fg },
    NeoTreeFloatBorder = { fg = p.mint, bg = p.bg },
    NeoTreeFloatNormal = { fg = p.fg, bg = p.dark },
    NeoTreeGitConflict = { fg = p.bright_red, bold = true },
    NeoTreeGitDeleted = { fg = p.bright_red },
    NeoTreeGitModified = { fg = p.yellow },
    NeoTreeGitRenamed = { fg = p.yellow },
    NeoTreeGitUnstaged = { fg = p.red },
    NeoTreeGitUntracked = { fg = p.red },
    NeoTreeNormal = { bg = p.bg },
    NeoTreeNormalNC = { bg = p.bg },
    NeoTreePreview = { fg = p.tan },
    NeoTreeRootName = { fg = p.mint, bold = true },
    NeoTreeVertSplit = { fg = p.mint, bg = p.bg },
    NeoTreeWinSeparator = { fg = p.mint, bg = p.bg },

    -- nvim-cmp
    CmpItemAbbr = { fg = p.fg },
    CmpItemAbbrDeprecated = { fg = p.gray, strikethrough = true },
    CmpItemAbbrMatch = { fg = p.bright_mint },
    CmpItemAbbrMatchFuzzy = { fg = p.mint, underline = true },
    CmpItemKind = { fg = p.purple },
    CmpItemKindCopilot = { fg = p.green },
    CmpItemMenu = { fg = p.gray, bg = p.dark },

    -- gitsigns
    GitSignsAdd = { fg = p.green },
    GitSignsAddLn = { fg = p.green },
    GitSignsAddNr = { fg = p.green },
    GitSignsChange = { fg = p.blue },
    GitSignsChangeLn = { fg = p.blue },
    GitSignsChangeNr = { fg = p.blue },
    GitSignsDelete = { fg = p.bright_red },
    GitSignsDeleteLn = { fg = p.bright_red },
    GitSignsDeleteNr = { fg = p.bright_red },
    GitSignsUntracked = { fg = p.yellow },
    GitSignsUntrackedLn = { fg = p.yellow },
    GitSignsUntrackedNr = { fg = p.yellow },

    -- Lazy
    LazyBackdrop = { bg = p.dark },
    LazyDimmed = { fg = p.mint },
    LazyH1 = { fg = p.black, bg = p.mint, bold = true },
    LazyH2 = { fg = p.green, bold = true },
    LazyProgressDone = { fg = p.green },
    LazyReasonCmd = { fg = p.tan },
    LazyReasonColorscheme = { fg = p.purple },
    LazyReasonFt = { fg = p.orange },
    LazyReasonKeys = { fg = p.red },
    LazyReasonPlugin = { fg = p.yellow, bold = true },
    LazyReasonSource = { fg = p.Blue },
    LazyReasonStart = { fg = p.cyan, bold = true },
    LazyReasonTask = { fg = p.light_gray },
    LazySpecial = { fg = p.blue },
    LazyUrl = { link = "@string.special.url" },

    -- Mason
    MasonBackdrop = { link = "LazyBackdrop" },
    MasonHeader = { fg = p.mint, bold = true },
    MasonHighlight = { fg = p.mint },
    MasonHighlightBlockBold = { fg = p.black, bg = p.bright_mint, bold = true },
    MasonMutedBlock = { fg = p.light_gray, bg = p.dark_gray },

    -- leap
    LeapLabel = { link = "Search" },

    -- snacks input
    SnacksInputTitle = { fg = p.mint, bg = p.dark },
    SnacksInputBorder = { link = "SnacksInputTitle" },
    SnacksInputNormal = { fg = p.fg, bg = p.dark },

    -- undotree
    UndotreeBranch = { fg = p.tan },
    UndotreeCurrent = { fg = p.bright_green },
    UndotreeHead = { fg = p.mint },
    UndotreeHelp = { link = "Comment" },
    UndotreeHelpKey = { fg = p.green },
    UndotreeNext = { fg = p.bright_mint },
    UndotreeNode = { fg = p.mint },
    UndotreeSavedBig = { fg = p.orange, bold = true },
    UndotreeSavedSmall = { fg = p.yellow },
    UndotreeSeq = { fg = p.dark_mint },
    UndotreeTimeStamp = { fg = p.purple },
}
